-- Note: All grammar labels and productions are prefixed with "G" in order to
-- differentiate them from types in the target language that may have the same
-- name

-- tokens

token UIdent      (upper (letter | digit | '_')*) ;
token LIdent      (lower (letter | digit | '_')*) ;
token IntTok      ('0' | ('~'? ["123456789"] digit*)) ;

-- Sequential language

GUnit.       GUnit ::= "{}" ;

GTNamedParam. GTNamedParam ::= GType ;
separator GTNamedParam "," ;

--[]. [GTNamedParams] ::= ;

GTNamedNoParam. GTNamedParams ::= ;
GTNamedParams.  GTNamedParams ::= "(" [GTNamedParam] ")" ;

GTTupArg.    GTTupArg ::= GType ;
separator    nonempty GTTupArg "," ;

GTVars.      GTVars ::= LIdent ;
terminator   GTVars "" ;

GTInt.       GType ::= "Int" ;
GTBool.      GType ::= "Bool" ;
GTUnit.      GType ::=  GUnit ;
GTTup.       GType ::= "{" [GTTupArg] "}";
GTNamed.     GType ::= UIdent GTNamedParams ;
GTTVar.      GType ::= LIdent ;

-- Struct element is an accessor followed by a type
GTStructFieldName. GTStructFieldName ::= LIdent ;
GTStructElement.   GTStructElement   ::= GTStructFieldName "::" GType ;
separator          nonempty GTStructElement "," ;

GTStructDef.    GTStructDef ::= UIdent [GTVars] "{" [GTStructElement] "}" ;
GTDefStruct.    GTypeDef ::= "stuct" GTStructDef ;

GTEnumElemNoTy.   GTEnumElem ::= LIdent ;
GTEnumElemWithTy. GTEnumElem ::= LIdent GType ;
separator      nonempty GTEnumElem "," ;

GTEnumDef.     GTEnumDef ::= UIdent [GTVars] "{" [GTEnumElem] "}" ;
GTDefEnum.     GTypeDef ::= "enum" GTEnumDef ;

GELetIdent.  GELetIdent ::= LIdent "=" GExpr ;
terminator   GELetIdent ";" ;

GELetExpr.   GELetExpr ::= [GELetIdent] GExpr ;

GEAppArg.    GEAppArg ::= GExpr ;
separator    nonempty GEAppArg "," ;

GEAbsArg.    GEAbsArg ::= LIdent ;
separator    nonempty GEAbsArg "" ;

-- tuple args can't be empty (GEUnit handles this)
GETupArg.    GETupArg ::= GExpr ;
separator    nonempty GETupArg "," ;

GELeftApp.   GExpr0 ::= GExpr1 "<$" GExpr0 ;
GERightApp.  GExpr0 ::= GExpr0 "$>" GExpr1 ;

--GEBind.      GExpr1 ::= GExpr1 ">>=" GExpr2 ;
--GESeq.       GExpr1 ::= GExpr1 ">>"  GExpr2 ;

GELogOr.     GExpr2 ::= GExpr3 "||" GExpr2 ;

GELogAnd.    GExpr3 ::= GExpr4 "&&" GExpr3 ;

GEEq.        GExpr4 ::= GExpr4 "==" GExpr4 ;
GENotEq.     GExpr4 ::= GExpr4 "!=" GExpr4 ;
GEGtEq.      GExpr4 ::= GExpr4 ">=" GExpr4 ;
GELtEq.      GExpr4 ::= GExpr4 "<=" GExpr4 ;
GEGt.        GExpr4 ::= GExpr4 ">"  GExpr4 ;
GELt.        GExpr4 ::= GExpr4 "<"  GExpr4 ;

GEPlus.      GExpr6 ::= GExpr6 "+" GExpr7 ;
GEMinus.     GExpr6 ::= GExpr6 "-" GExpr7 ;

GETimes.     GExpr7 ::= GExpr7 "*" GExpr8 ;
GEDiv.       GExpr7 ::= GExpr7 "/" GExpr8 ;
GEMod.       GExpr7 ::= GExpr7 "%" GExpr8 ;

GELeftComp.  GExpr9 ::= GExpr10 "<o" GExpr9 ;
GERightComp. GExpr9 ::= GExpr9  "o>" GExpr10 ;

GELogNot.    GExpr10 ::= "!" GExpr10 ;

GEIdx.       GExpr11 ::= GExpr11 "::" GExpr12 ; --LIdent ;

GEIf.        GExpr12 ::= "if" GExpr "{" GELetExpr "}" "else" "{" GELetExpr "}" ;

GEApp.       GExpr13 ::= GExpr13 "(" [GEAppArg] ")" ;

GEAbs.       GExpr14 ::= "\\" [GEAbsArg] "->" "{" GELetExpr "}" ;

GEInt.       GExpr15 ::= IntTok ;
GETrue.      GExpr15 ::= "true" ;
GEFalse.     GExpr15 ::= "false" ;
GETup.       GExpr15 ::= "{" [GETupArg] "}" ;
GEUnit.      GExpr15 ::= GUnit ;
GEVar.       GExpr15 ::= LIdent ;

coercions    GExpr 15 ;

-- Hardware language

GHwArea.    GHwArea ::= "area" ;
terminator  GHwArea "" ;

GHwState.   GHwState ::= "state" GType ;

GHwChan.    GHwChan ::= "channel" ;
terminator  GHwChan ";" ;

GHwInit.    GHwInit ::= "init" ;
GHwHandler. GHwHandler ::= "handler" ;

-- Combine the three

GFunc.      GFunc ::= "func" Ident ;
GProc.      GProc ::= "proc" Ident ;
GHwproc.    GHwproc ::= "hwproc" Ident "{" [GHwArea] GHwState [GHwChan] GHwInit GHwHandler "}" ;

rules GTopDef ::= GFunc | GProc | GHwproc ;
terminator  GTopDef "" ;

GProg.      GProg ::= [GTopDef] ;

comment "//" ;

-- Only export nessecary top level parsers
entrypoints GProg, GFunc, GProc, GHwproc,
            GType, GTypeDef, GTStructDef, GTEnumDef,
            GExpr ;

