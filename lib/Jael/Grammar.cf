-- Note: All grammar labels and productions are prefixed with "G" in order to
-- differentiate them from types in the target language with the same name

-- tokens

token UIdent (upper (letter | digit | '_')*) ;
token LIdent (lower (letter | digit | '_')*) ;

-- Sequential language

GTyInt.     GType  ::= "Int" ;
GTyBool.    GType  ::= "Bool" ;

GLetIdent.  GLetIdent ::= Ident "=" GExpr ;
terminator  nonempty GLetIdent ";" ;

GLet.       GExpr1 ::= "let" [GLetIdent] "in" GExpr ;

GEPlus.     GExpr2 ::= GExpr2 "+" GExpr3 ;
GEMinus.    GExpr2 ::= GExpr2 "-" GExpr3 ;

GETimes.    GExpr3 ::= GExpr3 "*" GExpr4 ;

GEVar.      GExpr4 ::= Ident ;
GEInt.      GExpr4 ::= Integer ;
GEIntNeg.   GExpr4 ::= "~" Integer;
GETrue.     GExpr4 ::= "true";
GEFalse.    GExpr4 ::= "false";

coercions   GExpr 4 ;

-- Hardware language

GHwArea.    GHwArea ::= "area" ;
terminator  GHwArea "" ;

GHwState.   GHwState ::= "state" ;

GHwChan.    GHwChan ::= "channel" ;
terminator  GHwChan ";" ;

GHwInit.    GHwInit ::= "init" ;
GHwHandler. GHwHandler ::= "handler" ;

-- Combine the three

GFunc.      GFunc ::= "func" Ident ;
GProc.      GProc ::= "proc" Ident ;
GHwproc.    GHwproc ::= "hwproc" Ident "{" [GHwArea] GHwState [GHwChan] GHwInit GHwHandler "}" ;

rules GTopDef ::= GFunc | GProc | GHwproc ;
terminator  GTopDef "" ;

GProg.      GProg ::= [GTopDef] ;

comment "//" ;

entrypoints GProg, GFunc, GProc, GHwproc, GExpr ;

