-- Note: All grammar labels and productions are prefixed with "G" in order to
-- differentiate them from types in the target language with the same name

-- tokens

token UIdent (upper (letter | digit | '_')*) ;
token LIdent (lower (letter | digit | '_')*) ;

-- Sequential language

GTInt.      GType  ::= "Int" ;
GTBool.     GType  ::= "Bool" ;

GELetIdent. GELetIdent ::= LIdent "=" GExpr ;
terminator  GELetIdent ";" ;

GELetExpr.  GELetExpr ::= [GELetIdent] GExpr ;

GEAbsArg.   GEAbsArg ::= LIdent ;
separator nonempty GEAbsArg "," ;

GEAbs.      GExpr1 ::= "\\" [GEAbsArg] "->" "{" GELetExpr "}" ;

GEIf.       GExpr2 ::= "if" GExpr "{" GELetExpr "}" "else" "{" GELetExpr "}" ;

GEPlus.     GExpr3 ::= GExpr3 "+" GExpr4 ;
GEMinus.    GExpr3 ::= GExpr3 "-" GExpr4 ;

GETimes.    GExpr4 ::= GExpr4 "*" GExpr5 ;

GELogNot.   GExpr5 ::= "!" GExpr5 ;

GEAppArg.   GEAppArg ::= GExpr ;
separator GEAppArg "," ;

GEApp.      GExpr6 ::= GExpr6 "(" [GEAppArg] ")" ;

GEVar.      GExpr7 ::= LIdent ;
GEInt.      GExpr7 ::= Integer ;
GEIntNeg.   GExpr7 ::= "~" Integer;
GETrue.     GExpr7 ::= "True";
GEFalse.    GExpr7 ::= "False";

coercions   GExpr 7 ;

-- Hardware language

GHwArea.    GHwArea ::= "area" ;
terminator  GHwArea "" ;

GHwState.   GHwState ::= "state" ;

GHwChan.    GHwChan ::= "channel" ;
terminator  GHwChan ";" ;

GHwInit.    GHwInit ::= "init" ;
GHwHandler. GHwHandler ::= "handler" ;

-- Combine the three

GFunc.      GFunc ::= "func" Ident ;
GProc.      GProc ::= "proc" Ident ;
GHwproc.    GHwproc ::= "hwproc" Ident "{" [GHwArea] GHwState [GHwChan] GHwInit GHwHandler "}" ;

rules GTopDef ::= GFunc | GProc | GHwproc ;
terminator  GTopDef "" ;

GProg.      GProg ::= [GTopDef] ;

comment "//" ;

-- Only export nessecary top level parsers
entrypoints GProg, GFunc, GProc, GHwproc, GExpr ;

